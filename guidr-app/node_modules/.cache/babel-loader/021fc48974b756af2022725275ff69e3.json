{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jeremiah\\\\Desktop\\\\Lamda\\\\Front-End\\\\guidr-app\\\\src\\\\Components\\\\PrivateRoute.js\";\n//importing dependencies\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux'; // Requirements:\n// 1. It has the same API as <Route />. (same props as Route)\n// 2. It renders a <Route /> and passes all the props through to it.\n// 3. It checks if the user is authenticated, if they are, it renders\n// the “component” prop. If not, it redirects the user to /login.\n\nconst PrivateRoute = (prop, {\n  component: Component,\n  ...props\n}) => {\n  return React.createElement(Route, Object.assign({}, props, {\n    render: () => {\n      /*if the localStorage item is set to the value within token the component is rendered*/\n      if (localStorage.getItem('token') === prop.token) {\n        return React.createElement(Component, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n      } //if not the user is redirected to the login page.\n      else {\n          return React.createElement(Redirect, {\n            to: \"/login\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23\n            },\n            __self: this\n          });\n        }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token,\n    user: state.profile\n  };\n};\n\nexport default connect(mapStateToProps, {})(PrivateRoute);","map":{"version":3,"sources":["C:/Users/Jeremiah/Desktop/Lamda/Front-End/guidr-app/src/Components/PrivateRoute.js"],"names":["React","Route","Redirect","connect","PrivateRoute","prop","component","Component","props","localStorage","getItem","token","mapStateToProps","state","user","profile"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAO;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAP,KAA8C;AACjE,SACE,oBAAC,KAAD,oBACMA,KADN;AAEE,IAAA,MAAM,EAAE,MAAM;AACZ;AACA,UAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkCL,IAAI,CAACM,KAA3C,EAAkD;AAChD,eAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,CAGA;AAHA,WAIK;AACH,iBAAO,oBAAC,QAAD;AAAU,YAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAeD,CAhBD;;AAkBA,MAAMC,eAAe,GAAGC,KAAK,IAAG;AAC9B,SAAO;AACHF,IAAAA,KAAK,EAAEE,KAAK,CAACF,KADV;AAEHG,IAAAA,IAAI,EAAED,KAAK,CAACE;AAFT,GAAP;AAID,CALD;;AAOA,eAAeZ,OAAO,CACpBS,eADoB,EAEpB,EAFoB,CAAP,CAGZR,YAHY,CAAf","sourcesContent":["//importing dependencies\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\n// Requirements:\r\n// 1. It has the same API as <Route />. (same props as Route)\r\n// 2. It renders a <Route /> and passes all the props through to it.\r\n// 3. It checks if the user is authenticated, if they are, it renders\r\n// the “component” prop. If not, it redirects the user to /login.\r\n\r\nconst PrivateRoute = (prop, { component: Component, ...props }) => {\r\n  return (\r\n    <Route\r\n      {...props}\r\n      render={() => {\r\n        /*if the localStorage item is set to the value within token the component is rendered*/\r\n        if (localStorage.getItem('token') === prop.token) {\r\n          return <Component />;\r\n        }\r\n        //if not the user is redirected to the login page.\r\n        else {\r\n          return <Redirect to=\"/login\" />;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state =>{\r\n  return {\r\n      token: state.token,\r\n      user: state.profile\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n) (PrivateRoute);"]},"metadata":{},"sourceType":"module"}